name: Athena CI

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  MAVEN_ARGS: -B -Dmaven.test.failure.ignore=false

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Define component matrix
        id: set-matrix
        run: |
          echo "matrix=$(jq -c -n '["athena-boot-core","athena-boot-git","athena-boot-kube","athena-boot-metric","athena-boot-pipeline","athena-boot-spec","athena-boot-tms"]')" >> $GITHUB_OUTPUT

  test:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: ${{ fromJson(needs.setup.outputs.matrix) }}
        attempt: [1, 2, 3]
      fail-fast: false
    name: Test ${{ matrix.component }} (Attempt ${{ matrix.attempt }})
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: m2-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            m2-${{ runner.os }}-

      - name: Run tests for ${{ matrix.component }}
        id: test
        continue-on-error: true
        run: ./mvnw ${{ env.MAVEN_ARGS }} -pl ${{ matrix.component }} test

      - name: Fail if all retries failed
        if: ${{ matrix.attempt == 3 && steps.test.outcome != 'success' }}
        run: exit 1

  sonar:
    needs: test
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || github.base_ref == 'main' }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven & Sonar
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            ~/.sonar/cache
          key: sonar-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: sonar-${{ runner.os }}-

      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          ./mvnw verify -P release org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
          -Dsonar.projectKey=catools2_athena

  deploy:
    needs: [sonar]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          server-id: github
          settings-path: ${{ github.workspace }}
          cache: maven

      - name: Cache Maven
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: m2-deploy-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: m2-deploy-${{ runner.os }}-

      - name: Deploy to GitHub Packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./mvnw org.codehaus.mojo:versions-maven-plugin:2.15.0:set-property \
            -Dproperty=revision -DnewVersion=${GITHUB_REF#refs/tags/} -q
          ./mvnw deploy -P release -DskipTests

  docker:
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build Docker Images
        run: |
          COMPONENTS=(
            athena-boot-core
            athena-boot-git
            athena-boot-kube
            athena-boot-metric
            athena-boot-pipeline
            athena-boot-spec
            athena-boot-tms
          )
          for comp in "${COMPONENTS[@]}"; do
            ./mvnw -pl $comp package docker:build
          done

      - name: Push Docker Images (tag only)
        if: startsWith(github.ref, 'refs/tags/')
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PAT: ${{ secrets.DOCKER_PAT }}
        run: |
          echo $DOCKER_PAT | docker login -u $DOCKER_USER --password-stdin
          COMPONENTS=(
            athena-boot-core
            athena-boot-git
            athena-boot-kube
            athena-boot-metric
            athena-boot-pipeline
            athena-boot-spec
            athena-boot-tms
          )
          for comp in "${COMPONENTS[@]}"; do
            ./mvnw -pl $comp docker:push
          done
