x-default-logging: &logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
    tag: "{{.Name}}"

x-common-variables: &common-variables
  DB_PSQL_URL: "jdbc:postgresql://athena-db:5432/athena"
  LOG_LEVEL: WARN

x-common_service: &common_service
  pull_policy: if_not_present
  restart: unless-stopped
  logging: *logging
  networks:
    - athena-network

x-athena_core_dependent_service: &athena_core_dependent_service
  <<: *common_service
  depends_on:
    athena-db:
      condition: service_healthy
  deploy:
    resources:
      limits:
        memory: 512M
  healthcheck:
    test: curl -s http://localhost:$${APP_PORT}/actuator/health | grep UP || exit 1
    start_period: 30s
    interval: 15s
    timeout: 5s
    retries: 10

services:
  # Athena Demo Database
  athena-db:
    <<: *common_service
    image: akeshmiri/athena-pg-demo:0.2
    environment:
      POSTGRES_PASSWORD: "password"
    ports:
      - 5432:5432
    healthcheck:
      test: pg_isready -U "postgres" -d "athena"
      interval: 1s
      timeout: 5s
      retries: 60
    volumes:
      - athena-athena-db:/var/lib/postgresql/data

  # Athena services
  athena-core:
    <<: *athena_core_dependent_service
    image: akeshmiri/athena-boot-core:latest
    ports:
      - 8081:8081
    environment:
      <<: *common-variables
      APP_PORT: 8081

  athena-git:
    <<: *athena_core_dependent_service
    image: akeshmiri/athena-boot-git:latest
    ports:
      - 8082:8082
    environment:
      <<: *common-variables
      APP_PORT: 8082

  athena-kube:
    <<: *athena_core_dependent_service
    image: akeshmiri/athena-boot-kube:latest
    ports:
      - 8083:8083
    environment:
      <<: *common-variables
      APP_PORT: 8083

  athena-metric:
    <<: *athena_core_dependent_service
    image: akeshmiri/athena-boot-metric:latest
    ports:
      - 8084:8084
    environment:
      <<: *common-variables
      APP_PORT: 8084

  athena-pipeline:
    <<: *athena_core_dependent_service
    image: akeshmiri/athena-boot-pipeline:latest
    ports:
      - 8085:8085
    environment:
      <<: *common-variables
      APP_PORT: 8085

  athena-spec:
    <<: *athena_core_dependent_service
    image: akeshmiri/athena-boot-spec:latest
    ports:
      - 8086:8086
    environment:
      <<: *common-variables
      APP_PORT: 8086

  athena-tms:
    <<: *athena_core_dependent_service
    image: akeshmiri/athena-boot-tms:latest
    ports:
      - 8087:8087
    environment:
      <<: *common-variables
      APP_PORT: 8087

  athena-gateway:
    <<: *common_service
    image: akeshmiri/athena-gateway:latest
    depends_on:
      athena-core:
        condition: service_healthy
      athena-git:
        condition: service_healthy
      athena-kube:
        condition: service_healthy
      athena-metric:
        condition: service_healthy
      athena-pipeline:
        condition: service_healthy
      athena-spec:
        condition: service_healthy
      athena-tms:
        condition: service_healthy
    ports:
      - 8080:8080
    deploy:
      resources:
        limits:
          memory: 256M
    healthcheck:
      test: curl -s http://localhost:8080/core/actuator/health | grep UP || exit 1
      start_period: 30s
      interval: 15s
      timeout: 5s
      retries: 10
    environment:
      SPRING_PROFILES_ACTIVE: path
      SPRING_CLOUD_GATEWAY_ROUTES[0]_URI: http://athena-core:8081
      SPRING_CLOUD_GATEWAY_ROUTES[0]_ID: athena-core
      SPRING_CLOUD_GATEWAY_ROUTES[0]_PREDICATES[0]: Path= /core/**
      SPRING_CLOUD_GATEWAY_ROUTES[0]_FILTERS[0]: StripPrefix=1

      SPRING_CLOUD_GATEWAY_ROUTES[1]_URI: http://athena-git:8082
      SPRING_CLOUD_GATEWAY_ROUTES[1]_ID: athena-git
      SPRING_CLOUD_GATEWAY_ROUTES[1]_PREDICATES[0]: Path= /git/**
      SPRING_CLOUD_GATEWAY_ROUTES[1]_FILTERS[0]: StripPrefix=1

      SPRING_CLOUD_GATEWAY_ROUTES[2]_URI: http://athena-kube:8083
      SPRING_CLOUD_GATEWAY_ROUTES[2]_ID: athena-kube
      SPRING_CLOUD_GATEWAY_ROUTES[2]_PREDICATES[0]: Path= /kube/**
      SPRING_CLOUD_GATEWAY_ROUTES[2]_FILTERS[0]: StripPrefix=1

      SPRING_CLOUD_GATEWAY_ROUTES[3]_URI: http://athena-metric:8084
      SPRING_CLOUD_GATEWAY_ROUTES[3]_ID: athena-metric
      SPRING_CLOUD_GATEWAY_ROUTES[3]_PREDICATES[0]: Path= /metric/**
      SPRING_CLOUD_GATEWAY_ROUTES[3]_FILTERS[0]: StripPrefix=1

      SPRING_CLOUD_GATEWAY_ROUTES[4]_URI: http://athena-pipeline:8085
      SPRING_CLOUD_GATEWAY_ROUTES[4]_ID: athena-pipeline
      SPRING_CLOUD_GATEWAY_ROUTES[4]_PREDICATES[0]: Path= /pipeline/**
      SPRING_CLOUD_GATEWAY_ROUTES[4]_FILTERS[0]: StripPrefix=1

      SPRING_CLOUD_GATEWAY_ROUTES[5]_URI: http://athena-spec:8086
      SPRING_CLOUD_GATEWAY_ROUTES[5]_ID: athena-spec
      SPRING_CLOUD_GATEWAY_ROUTES[5]_PREDICATES[0]: Path= /spec/**
      SPRING_CLOUD_GATEWAY_ROUTES[5]_FILTERS[0]: StripPrefix=1

      SPRING_CLOUD_GATEWAY_ROUTES[6]_URI: http://athena-tms:8087
      SPRING_CLOUD_GATEWAY_ROUTES[6]_ID: athena-tms
      SPRING_CLOUD_GATEWAY_ROUTES[6]_PREDICATES[0]: Path= /tms/**
      SPRING_CLOUD_GATEWAY_ROUTES[6]_FILTERS[0]: StripPrefix=1

  athena-pgadmin:
    <<: *common_service
    image: dpage/pgadmin4:latest
    depends_on:
      athena-db:
        condition: service_healthy
    ports:
      - 8888:80
    deploy:
      resources:
        limits:
          memory: 512M
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@athena.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    user: root
    entrypoint: /bin/sh -c "chmod 0600 /pgpass; /entrypoint.sh;"
    volumes:
      - athena-pgadmin-data:/var/lib/pgadmin
    configs:
      - source: pgadmin-servers
        target: /pgadmin4/servers.json
      - source: pgadmin-pgpass
        target: /pgpass

  athena-locust-master:
    <<: *common_service
    image: locustio/locust:latest
    depends_on:
      athena-locust-worker:
        condition: service_started
    ports:
      - 8089:8089
    deploy:
      resources:
        limits:
          memory: 512M
    volumes:
      - ./locust/:/mnt/locust/
    command: -f /mnt/locust/ --master -H http://athena-gateway:8080

  athena-locust-worker:
    <<: *common_service
    image: locustio/locust:latest
    depends_on:
      athena-core:
        condition: service_healthy
      athena-git:
        condition: service_healthy
      athena-kube:
        condition: service_healthy
      athena-metric:
        condition: service_healthy
      athena-pipeline:
        condition: service_healthy
      athena-spec:
        condition: service_healthy
      athena-tms:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 1.5G
    volumes:
      - ./locust/:/mnt/locust/
    command: -f /mnt/locust/ --worker --master-host athena-locust-master

  # OTel
  athena-nats:
    <<: *common_service
    image: nats:latest
    ports:
      - 4222:4222 # connecting
      - 8222:8222 # reporting server

  # OpenTelemetry Collector
  athena-otel-collector:
    <<: *common_service
    image: otel/opentelemetry-collector-contrib:latest
    deploy:
      resources:
        limits:
          memory: 200M
    user: 0:0
    ports:
      - 4317:4317
      - 4318:4318
    environment:
      - ENVOY_PORT=8080
      - HOST_FILESYSTEM=/
      - OTEL_COLLECTOR_HOST=athena-otel-collector
      - OTEL_COLLECTOR_PORT_GRPC=4317
      - OTEL_COLLECTOR_PORT_HTTP=4318
      - GOMEMLIMIT=160MiB
    volumes:
      - /:/hostfs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./otel-collector/otelcol-config.yml:/etc/otelcol-config.yml
      - ./otel-collector/otelcol-config-extras.yml:/etc/otelcol-config-extras.yml
    command: [ "--config=/etc/otelcol-config.yml", "--config=/etc/otelcol-config-extras.yml" ]

  ## Prometheus
  athena-prometheus:
    <<: *common_service
    image: prom/prometheus:latest
    deploy:
      resources:
        limits:
          memory: 256M
    ports:
      - 9090:9090
    environment:
      - SCRAPE_INTERVAL=5s
    volumes:
      - ./prometheus/prometheus-config.yaml:/etc/prometheus/prometheus-config.yaml
      - athena-prometheus-data:/etc/prometheus/
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --config.file=/etc/prometheus/prometheus-config.yaml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --web.enable-otlp-receiver
      - --enable-feature=exemplar-storage

  ## Grafana
  athena-grafana:
    <<: *common_service
    image: grafana/grafana:latest
    depends_on:
      athena-prometheus:
        condition: service_started
    ports:
      - 3000:3000
    deploy:
      resources:
        limits:
          memory: 512M
    environment:
      - GF_SECURITY_ADMIN_USER=athena
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_DATA_SOURCE_PROMETHEUS_URL=http://athena-prometheus:9090
    volumes:
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/provisioning/:/etc/grafana/provisioning/
      - athena-grafana_data:/var/lib/grafana

# Compose Configurations
configs:
  pgadmin-pgpass:
    content: athena-db:5432:athena:postgres:password
  pgadmin-servers:
    content: |
      {"Servers": {"1": {
        "Group": "Servers",
        "Name": "Athena DB",
        "Host": "athena-db",
        "Port": 5432,
        "MaintenanceDB": "postgres",
        "Username": "postgres",
        "PassFile": "/pgpass",
        "SSLMode": "prefer"
      }}}

volumes:
  athena-athena-db:
  athena-pgadmin-data:
  athena-prometheus-data:
  athena-grafana_data:

networks:
  athena-network:
    driver: bridge