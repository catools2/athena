default:
  # List of environment variables applied to all components
  env:
    - name: OTEL_SERVICE_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: "metadata.labels['app.kubernetes.io/component']"
    - name: OTEL_COLLECTOR_NAME
      value: otel-collector
    - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
      value: cumulative
    - name: OTEL_RESOURCE_ATTRIBUTES
      value: 'service.name=$(OTEL_SERVICE_NAME),service.namespace={{ .Release.Namespace }},service.version={{ .Chart.AppVersion }}'
    - name: OTEL_EXPORTER_OTLP_ENDPOINT
      value: http://$(OTEL_COLLECTOR_NAME).default.svc.cluster.local:4318
    - name: FEIGN_CLIENT_CORE_URL
      value: http://athena-core.default.svc.cluster.local:8081
    - name: ATHENA_DB_HOSTNAME
      value: athena-db
    - name: ATHENA_DB_PORT
      value: '5432'
    - name: ATHENA_DB_DATABASE
      value: athena
    - name: ATHENA_DB_USERNAME
      value: postgres
    - name: ATHENA_DB_PASSWORD
      value: password
    - name: FLYWAY_ENABLED
      value: 'true'
    - name: OTEL_TRACING_ENABLED
      value: 'false'

  # Allows overriding and additions to .Values.default.env
  envOverrides: [ ]

  #  - name: OTEL_K8S_NODE_NAME
  #    value: "someConstantValue"
  image:
    repository: docker.io
    # Overrides the image tag whose default is the chart appVersion.
    # The service's name will be applied to the end of this value.
    tag: "latest"
    pullPolicy: IfNotPresent
    pullSecrets: [ ]

  # Default # of replicas for all components
  replicas: 1

  # default revisionHistoryLimit for all components (number of old ReplicaSets to retain)
  revisionHistoryLimit: 10

  # Default schedulingRules for all components
  schedulingRules:
    nodeSelector: { }
    affinity: { }
    tolerations: [ ]

  # Default securityContext for all components
  securityContext: { }

ingress:
  enabled: true

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: { }
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

components:
  athena-core:
    enabled: true
    ports:
      - name: http
        value: 8081
    imageOverride:
      repository: "localhost:5000/akeshmiri/athena-boot-core"
      tag: "0.0.1-SNAPSHOT"
    useDefault:
      env: true
    resources:
      limits:
        memory: 512Mi

  athena-git:
    enabled: true
    ports:
      - name: http
        value: 8082
    imageOverride:
      repository: "localhost:5000/akeshmiri/athena-boot-git"
      tag: "0.0.1-SNAPSHOT"
    useDefault:
      env: true
    resources:
      limits:
        memory: 512Mi

  athena-kube:
    enabled: true
    ports:
      - name: http
        value: 8083
    imageOverride:
      repository: "localhost:5000/akeshmiri/athena-boot-kube"
      tag: "0.0.1-SNAPSHOT"
    useDefault:
      env: true
    resources:
      limits:
        memory: 512Mi

  athena-metric:
    enabled: true
    ports:
      - name: http
        value: 8084
    imageOverride:
      repository: "localhost:5000/akeshmiri/athena-boot-metric"
      tag: "0.0.1-SNAPSHOT"
    useDefault:
      env: true
    resources:
      limits:
        memory: 512Mi

  athena-pipeline:
    enabled: true
    ports:
      - name: http
        value: 8085
    imageOverride:
      repository: "localhost:5000/akeshmiri/athena-boot-pipeline"
      tag: "0.0.1-SNAPSHOT"
    useDefault:
      env: true
    resources:
      limits:
        memory: 512Mi

  athena-spec:
    enabled: true
    ports:
      - name: http
        value: 8086
    imageOverride:
      repository: "localhost:5000/akeshmiri/athena-boot-spec"
      tag: "0.0.1-SNAPSHOT"
    useDefault:
      env: true
    resources:
      limits:
        memory: 512Mi

  athena-tms:
    enabled: true
    ports:
      - name: http
        value: 8087
    imageOverride:
      repository: "localhost:5000/akeshmiri/athena-boot-tms"
      tag: "0.0.1-SNAPSHOT"
    useDefault:
      env: true
    resources:
      limits:
        memory: 512Mi

  athena-gateway:
    enabled: true
    ports:
      - name: http
        value: 8080
    imageOverride:
      repository: "localhost:5000/akeshmiri/athena-gateway"
      tag: "0.0.1-SNAPSHOT"
    useDefault:
      env: true
    env:
      - name: SPRING_PROFILES_ACTIVE
        value: path

      - name: SPRING_CLOUD_GATEWAY_ROUTES[0]_URI
        value: http://athena-core.default.svc.cluster.local:8081
      - name: SPRING_CLOUD_GATEWAY_ROUTES[0]_ID
        value: athena-core
      - name: SPRING_CLOUD_GATEWAY_ROUTES[0]_PREDICATES[0]
        value: Path= /core/**
      - name: SPRING_CLOUD_GATEWAY_ROUTES[0]_FILTERS[0]
        value: StripPrefix=1

      - name: SPRING_CLOUD_GATEWAY_ROUTES[1]_URI
        value: http://athena-git.default.svc.cluster.local:8082
      - name: SPRING_CLOUD_GATEWAY_ROUTES[1]_ID
        value: athena-git
      - name: SPRING_CLOUD_GATEWAY_ROUTES[1]_PREDICATES[0]
        value: Path= /git/**
      - name: SPRING_CLOUD_GATEWAY_ROUTES[1]_FILTERS[0]
        value: StripPrefix=1

      - name: SPRING_CLOUD_GATEWAY_ROUTES[2]_URI
        value: http://athena-kube.default.svc.cluster.local:8083
      - name: SPRING_CLOUD_GATEWAY_ROUTES[2]_ID
        value: athena-kube
      - name: SPRING_CLOUD_GATEWAY_ROUTES[2]_PREDICATES[0]
        value: Path= /kube/**
      - name: SPRING_CLOUD_GATEWAY_ROUTES[2]_FILTERS[0]
        value: StripPrefix=1

      - name: SPRING_CLOUD_GATEWAY_ROUTES[3]_URI
        value: http://athena-metric.default.svc.cluster.local:8084
      - name: SPRING_CLOUD_GATEWAY_ROUTES[3]_ID
        value: athena-metric
      - name: SPRING_CLOUD_GATEWAY_ROUTES[3]_PREDICATES[0]
        value: Path= /metric/**
      - name: SPRING_CLOUD_GATEWAY_ROUTES[3]_FILTERS[0]
        value: StripPrefix=1

      - name: SPRING_CLOUD_GATEWAY_ROUTES[4]_URI
        value: http://athena-pipeline.default.svc.cluster.local:8085
      - name: SPRING_CLOUD_GATEWAY_ROUTES[4]_ID
        value: athena-pipeline
      - name: SPRING_CLOUD_GATEWAY_ROUTES[4]_PREDICATES[0]
        value: Path= /pipeline/**
      - name: SPRING_CLOUD_GATEWAY_ROUTES[4]_FILTERS[0]
        value: StripPrefix=1

      - name: SPRING_CLOUD_GATEWAY_ROUTES[5]_URI
        value: http://athena-spec.default.svc.cluster.local:8086
      - name: SPRING_CLOUD_GATEWAY_ROUTES[5]_ID
        value: athena-spec
      - name: SPRING_CLOUD_GATEWAY_ROUTES[5]_PREDICATES[0]
        value: Path= /spec/**
      - name: SPRING_CLOUD_GATEWAY_ROUTES[5]_FILTERS[0]
        value: StripPrefix=1

      - name: SPRING_CLOUD_GATEWAY_ROUTES[6]_URI
        value: http://athena-tms.default.svc.cluster.local:8087
      - name: SPRING_CLOUD_GATEWAY_ROUTES[6]_ID
        value: athena-tms
      - name: SPRING_CLOUD_GATEWAY_ROUTES[6]_PREDICATES[0]
        value: Path= /tms/**
      - name: SPRING_CLOUD_GATEWAY_ROUTES[6]_FILTERS[0]
        value: StripPrefix=1

    resources:
      limits:
        memory: 512Mi

    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /$1$2
      paths:
        - path: /(core|git|kube|metric|pipeline|spec|tms)(/.*)
          pathType: ImplementationSpecific
          port: 8080
          name: gateway-http

########################
# Postgresql
########################
pgadmin4:
  enabled: true
  fullnameOverride: pgadmin
  env:
    email: "admin@example.com"
    password: "admin"
  resources:
    requests:
      memory: 512Mi
      cpu: 0.5
    limits:
      memory: 2G
      cpu: 1

postgresql:
  enabled: true
  fullnameOverride: athena-db
  global:
    postgresql:
      auth:
        database: "athena"
        username: "postgres"
        password: "password"

opentelemetry-collector:
  enabled: true
  image:
    repository: "otel/opentelemetry-collector-contrib"
  fullnameOverride: otel-collector
  mode: deployment
  presets:
    kubernetesAttributes:
      enabled: true
  resources:
    limits:
      memory: 200Mi
  service:
    type: ClusterIP
  ports:
    metrics:
      enabled: true
  podAnnotations:
    prometheus.io/scrape: "true"

  config:
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318

    exporters:
      otlphttp/prometheus:
        endpoint: http://prometheus-server.default.svc.cluster.local:9090/api/v1/otlp
      otlphttp/tempo:
        endpoint: http://tempo-distributor.default.svc.cluster.local:4318
      debug: { }

    processors:
      batch: { }

    service:
      pipelines:
        traces:
          receivers: [ otlp ]
          processors: [ batch ]
          exporters: [ otlphttp/tempo, debug ]
        metrics:
          receivers: [ otlp ]
          processors: [ batch ]
          exporters: [ otlphttp/prometheus, debug ]


########################
# Observability
########################
prometheus:
  enabled: true
  alertmanager:
    enabled: false
  configmapReload:
    prometheus:
      enabled: false
  kube-state-metrics:
    enabled: false
  prometheus-node-exporter:
    enabled: false
  prometheus-pushgateway:
    enabled: false
  server:
    fullnameOverride: prometheus
    extraFlags:
      - "enable-feature=exemplar-storage"
      - "web.enable-otlp-receiver"
    global:
      scrape_interval: 5s
      scrape_timeout: 3s
      evaluation_interval: 30s
    tsdb:
      out_of_order_time_window: 30m
    prometheus.yml:
      otlp:
        keep_identifying_resource_attributes: true
        # Recommended attributes to be promoted to labels.
        promote_resource_attributes:
          - service.instance.id
          - service.name
          - service.namespace
          - cloud.availability_zone
          - cloud.region
          - container.name
          - deployment.environment.name
          - k8s.cluster.name
          - k8s.container.name
          - k8s.cronjob.name
          - k8s.daemonset.name
          - k8s.deployment.name
          - k8s.job.name
          - k8s.namespace.name
          - k8s.pod.name
          - k8s.replicaset.name
          - k8s.statefulset.name
    persistentVolume:
      enabled: false
    service:
      servicePort: 9090
    resources:
      limits:
        memory: 300Mi

influxdb:
  enabled: true
  fullnameOverride: athena-influxdb

  auth:
    admin:
      password: admin123
      token: influxdb-token
      organization: athena-org
      bucket: athena-metrics

  architecture: standalone

  persistence:
    enabled: true
    storageClass: "standard"
    size: 8Gi

  ingress:
    enabled: false

  metrics:
    enabled: true  # Enables /metrics endpoint for internal Prometheus scraping

########################
# grafana
########################
grafana:
  # -- Deploy Grafana if enabled. See [upstream readme](https://github.com/grafana/helm-charts/tree/main/charts/grafana#configuration) for full values reference.
  enabled: true

  # -- Grafana data sources config. Connects to all three by default
  datasources:
    datasources.yaml:
      apiVersion: 1
      # -- Datasources linked to the Grafana instance. Override if you disable any components.
      datasources:
        # https://grafana.com/docs/grafana/latest/datasources/loki/#provision-the-loki-data-source
        - name: Loki
          uid: loki
          type: loki
          url: http://{{ .Release.Name }}-loki-gateway
          isDefault: false
        # https://grafana.com/docs/grafana/latest/datasources/prometheus/#provision-the-data-source
        - name: Mimir
          uid: prom
          type: prometheus
          url: http://{{ .Release.Name }}-mimir-nginx/prometheus
          isDefault: true
        # https://grafana.com/docs/grafana/latest/datasources/tempo/configure-tempo-data-source/#provision-the-data-source
        - name: Tempo
          uid: tempo
          type: tempo
          url: http://{{ .Release.Name }}-tempo-query-frontend:3100
          isDefault: false
          jsonData:
            tracesToLogsV2:
              datasourceUid: loki
            lokiSearch:
              datasourceUid: loki
            tracesToMetrics:
              datasourceUid: prom
            serviceMap:
              datasourceUid: prom

loki:
  # -- Deploy Loki if enabled. See [upstream readme](https://github.com/grafana/helm-charts/tree/main/charts/loki-distributed#values) for full values reference.
  enabled: true

# -- Mimir chart values. Resources are set to a minimum by default.
mimir:
  # -- Deploy Mimir if enabled. See [upstream values.yaml](https://github.com/grafana/mimir/blob/main/operations/helm/charts/mimir-distributed/values.yaml) for full values reference.
  enabled: true
  alertmanager:
    resources:
      requests:
        cpu: 20m
  compactor:
    resources:
      requests:
        cpu: 20m
  distributor:
    resources:
      requests:
        cpu: 20m
  ingester:
    replicas: 2
    zoneAwareReplication:
      enabled: false
    resources:
      requests:
        cpu: 20m
  overrides_exporter:
    resources:
      requests:
        cpu: 20m
  querier:
    replicas: 1
    resources:
      requests:
        cpu: 20m
  query_frontend:
    resources:
      requests:
        cpu: 20m
  query_scheduler:
    replicas: 1
    resources:
      requests:
        cpu: 20m
  ruler:
    resources:
      requests:
        cpu: 20m
  store_gateway:
    zoneAwareReplication:
      enabled: false
    resources:
      requests:
        cpu: 20m
  minio:
    resources:
      requests:
        cpu: 20m
  rollout_operator:
    resources:
      requests:
        cpu: 20m

tempo:
  # -- Deploy Tempo if enabled.  See [upstream readme](https://github.com/grafana/helm-charts/blob/main/charts/tempo-distributed/README.md#values) for full values reference.
  enabled: true
  ingester:
    replicas: 1
